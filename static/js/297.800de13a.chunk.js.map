{"version":3,"file":"static/js/297.800de13a.chunk.js","mappings":"4MAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACnBC,EAAY,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EACjBC,EAAa,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,E,UCD/B,EAAuB,mBAAvB,EAAkD,oBAAlD,EAAkF,wBAAlF,EAAkH,oBAAlH,EAA4I,kB,SCoD5I,EA/Ca,WACX,IAAML,GAAWM,EAAAA,EAAAA,IAAYR,GACvBS,GAAWC,EAAAA,EAAAA,MAcjB,OACE,kBAAMC,UAAWC,EAAaC,SAbX,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cAAcC,SAASF,KAAKG,MACzCC,EAAQN,EAAMG,cAAcC,SAASG,OAAOF,MAC5CG,EAAa,CAAEN,KAAAA,EAAMI,MAAAA,GAC3BlB,EAASqB,MAAK,SAAAC,GAAO,OAAIR,IAASQ,EAAQR,IAArB,IACjBS,MAAM,GAAD,OAAIT,EAAJ,6BACLP,GAASiB,EAAAA,EAAAA,IAAqBJ,IAClCR,EAAMG,cAAcC,SAASF,KAAKG,MAAQ,GAC1CL,EAAMG,cAAcC,SAASG,OAAOF,MAAQ,EAC7C,EAGC,WACE,mBAAOR,UAAWC,EAAlB,WACE,iBAAMD,UAAWC,EAAjB,mBACA,kBACED,UAAWC,EACXe,KAAK,OACLX,KAAK,OACLY,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOnB,UAAWC,EAAlB,WACE,iBAAMD,UAAWC,EAAjB,qBACA,kBACED,UAAWC,EACXe,KAAK,MACLX,KAAK,SACLY,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQnB,UAAWC,EAAYe,KAAK,SAApC,2BAKL,EClDD,EAAuB,2BAAvB,EAAsD,wBAAtD,EAAqF,2BCiDrF,EAxCqB,WACnB,IAAMzB,GAAWM,EAAAA,EAAAA,IAAYR,GACvBK,GAASG,EAAAA,EAAAA,IAAYJ,GACrB2B,GAAUvB,EAAAA,EAAAA,IAAYF,GACtBG,GAAWC,EAAAA,EAAAA,MAajB,OAJAsB,EAAAA,EAAAA,YAAU,WACRvB,GAASwB,EAAAA,EAAAA,MACV,GAAE,CAACxB,KAGF,iCACE,eAAIE,UAAWC,EAAf,SACuB,IAApBV,EAASgC,SAbd7B,EACIH,EAASG,QAAO,SAAAmB,GAAO,OACrBA,EAAQR,KAAKmB,cAAcC,SAAS/B,EAAO8B,cADtB,IAGvBjC,GAUqBmC,KAAI,gBAAGC,EAAH,EAAGA,GAAItB,EAAP,EAAOA,KAAMI,EAAb,EAAaA,MAAb,OACrB,gBAAaT,UAAWC,EAAxB,WACE,eAAGD,UAAWC,EAAd,UACGI,EADH,KACWI,MAEX,mBACEO,KAAK,SACLY,QAAS,kBAAM9B,GAAS+B,EAAAA,EAAAA,IAAuBF,GAAtC,EAFX,sBAJOA,EADY,MAc1BP,IAAW,yCAGjB,EC/CD,EAAoB,kBAApB,EAA8C,sB,UCmB9C,EAhBe,WACb,IAAMtB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,iCACE,cAAGC,UAAWC,EAAd,oCACA,kBACED,UAAWC,EACX6B,SAAU,SAAAC,GAAC,OAAIjC,GAASkC,EAAAA,EAAAA,GAAUD,GAAvB,EACXf,KAAK,OACLX,KAAK,aAIZ,ECjBD,EAAwB,4BCgBxB,EAZqB,WACnB,OACE,iCACE,eAAIL,UAAWC,EAAf,wBACA,SAAC,EAAD,KACA,eAAID,UAAWC,EAAf,uBACA,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const getLoading = state => state.contacts.isLoading;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\",\"labelText\":\"Form_labelText__QEoxm\",\"input\":\"Form_input__FTtTw\",\"btn\":\"Form_btn__0ebGo\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { postContactOperation } from '../../redux/contacts/operations';\nimport styles from './Form.module.css';\n\nconst Form = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const name = event.currentTarget.elements.name.value;\n    const phone = event.currentTarget.elements.number.value;\n    const newContact = { name, phone };\n    contacts.some(contact => name === contact.name)\n      ? alert(`${name} is already in contacts.`)\n      : dispatch(postContactOperation(newContact));\n    event.currentTarget.elements.name.value = '';\n    event.currentTarget.elements.number.value = '';\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label}>\n        <span className={styles.labelText}>Name</span>\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={styles.label}>\n        <span className={styles.labelText}>Number</span>\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className={styles.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__mmE3Y\",\"p\":\"ContactsList_p__r93cN\",\"item\":\"ContactsList_item__6gc1x\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport styles from './ContactsList.module.css';\nimport {\n  getContactsOperation,\n  deleteContactOperation,\n} from 'redux/contacts/operations';\nimport { getLoading } from 'redux/contacts/selectors';\n\nconst ContactsList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const loading = useSelector(getLoading);\n  const dispatch = useDispatch();\n\n  const filteredContacts = () =>\n    filter\n      ? contacts.filter(contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase())\n        )\n      : contacts;\n\n  useEffect(() => {\n    dispatch(getContactsOperation());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ul className={styles.list}>\n        {contacts.length !== 0 &&\n          filteredContacts().map(({ id, name, phone }) => (\n            <li key={id} className={styles.item}>\n              <p className={styles.p}>\n                {name}: {phone}\n              </p>\n              <button\n                type=\"button\"\n                onClick={() => dispatch(deleteContactOperation(id))}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n      </ul>\n      {loading && <h3>Loading...</h3>}\n    </>\n  );\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"p\":\"Filter_p__1rMTA\",\"input\":\"Filter_input__N7T3z\"};","import styles from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <p className={styles.p}>Find contacts by name</p>\n      <input\n        className={styles.input}\n        onChange={e => dispatch(setFilter(e))}\n        type=\"text\"\n        name=\"filter\"\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ContactsPage_title__P3MkR\"};","import Form from 'components/Form/Form';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport styles from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <h2 className={styles.title}>Phonebook</h2>\n      <Form />\n      <h2 className={styles.title}>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getLoading","isLoading","useSelector","dispatch","useDispatch","className","styles","onSubmit","event","preventDefault","name","currentTarget","elements","value","phone","number","newContact","some","contact","alert","postContactOperation","type","pattern","title","required","loading","useEffect","getContactsOperation","length","toLowerCase","includes","map","id","onClick","deleteContactOperation","onChange","e","setFilter"],"sourceRoot":""}